buildscript {
    repositories {
       mavenLocal()
       mavenCentral()
       jcenter()
    }
    dependencies {
        classpath group: 'com.opitzconsulting.orcas', name: 'orcas-gradle-plugin',
                  version: '7.6.0'

        classpath group: 'com.oracle.ojdbc', name: 'ojdbc8', version: '19.3.0.0'
    }
}

import com.opitzconsulting.orcas.gradle.*;

extensions.create("orcasconfiguration", OrcasGradlePluginExtension)

task('cleanLog', type:  OrcasCleanLogTask)

task('ddlInit', type: ExecuteOrcasOneTimeScriptsTask){
  scriptfolder='dml/init'
  logname = 'ddl-init'
}

task('dmlInit', dependsOn: 'ddlInit', type: ExecuteOrcasOneTimeScriptsTask){
  scriptfolder='dml/init'
  logname = 'dml-init'
}

task('ddlPre', dependsOn: 'dmlInit', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree('ddl/pre')
  logname = 'ddl-pre'
}

task('dmlPre', dependsOn: 'ddlPre', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree('dml/pre')
  logname = 'dml-pre'
}

task('tables', dependsOn: 'dmlPre', type:  OrcasUpdateStaticsTask){
  scriptFiles=project.fileTree(dir: '.', includes:['tables/','sequences/'])
}

task('tables_ddl', dependsOn: 'tables', type: ExecuteOrcasOneTimeScriptsTask){
  scriptfolder = ('tables_ddl')
  logname = 'tables_ddl'
}

task('dropReplaceables', dependsOn:'tables_ddl', type:  OrcasDropReplaceablesTask)

task('hookFunctionsPre', dependsOn: 'dropReplaceables', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree('.hooks/pre/functions')
  logname = 'hook-functions-pre'
}

task('sourcesFunctions', dependsOn: 'hookFunctionsPre', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree("sources/functions")
  logname="sources-functions"
}

task('hookFunctionsPost', dependsOn: 'sourcesFunctions', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree('.hooks/post/functions')
  logname = 'hook-functions-post'
}

task('hookProceduresPre', dependsOn: 'hookFunctionsPost', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree('.hooks/pre/procedures')
  logname = 'hook-procedures-pre'
}

task('sourcesProcedures', dependsOn: 'hookProceduresPre', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree("sources/procedures")
  logname="sources-procedures"
}

task('hookProceduresPost', dependsOn: 'sourcesProcedures', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree('.hooks/post/procedures')
  logname = 'hook-procedures-post'
}

task('hookObjectsPre', dependsOn: 'hookProceduresPost', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree('.hooks/pre/objects')
  logname = 'hook-objects-pre'
}

task('sourcesObjects', dependsOn: 'hookObjectsPre', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree("sources/objects")
  logname="sources-objects"
}

task('hookObjectsPost', dependsOn: 'sourcesObjects', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree('.hooks/post/objects')
  logname = 'hook-objects-post'
}

task('hookPackagesPre', dependsOn: 'hookObjectsPost', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree('.hooks/pre/packages')
  logname = 'hook-packages-pre'
}

task('sourcesPackages', dependsOn: 'hookPackagesPre', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree("sources/packages")
  logname="sources-packages"
}

task('hookPackagesPost', dependsOn: 'sourcesPackages', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree('.hooks/post/packages')
  logname = 'hook-packages-post'
}

task('hookTriggerPre', dependsOn: 'hookPackagesPost', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree('.hooks/pre/trigger')
  logname = 'hook-trigger-pre'
}

task('sourcesTrigger', dependsOn: 'hookTriggerPre', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree("sources/trigger")
  logname="sources-trigger"
}

task('hookTriggerPost', dependsOn: 'sourcesTrigger', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree('.hooks/post/trigger')
  logname = 'hook-trigger-post'
}

task('hookViewsPre', dependsOn: 'hookTriggerPost', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree('.hooks/pre/views')
  logname = 'hook-views-pre'
}

task('sourcesViews', dependsOn: 'hookViewsPre', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree("sources/views")
  logname="sources-views"
}

task('hookViewsPost', dependsOn: 'sourcesViews', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree('.hooks/post/views')
  logname = 'hook-views-post'
}

task('precompile', dependsOn: 'hookViewsPost', type: ExecuteOrcasScriptsTask){
  scriptfolder=".hooks/precompile"
  logname="precompile"
}

task('compileReplaceables',dependsOn: 'precompile', type:  OrcasCompileAllInvalidTask)

task('sourcesTests', dependsOn: 'compileReplaceables', type: ExecuteOrcasScriptsTask){
  scriptFiles=project.fileTree("sources/tests")
  logname="sources-tests"
}

task('ddlPost', dependsOn: 'sourcesTests', type: ExecuteOrcasOneTimeScriptsTask){
  scriptfolder=('ddl/post')
  logname = 'ddl-post'
}

task('dmlPost', dependsOn: 'ddlPost', type: ExecuteOrcasOneTimeScriptsTask){
  scriptfolder=('dml/post')
  logname = 'dml-post'
}

task('finish', dependsOn: 'dmlPost', type: ExecuteOrcasScriptsTask){
   scriptFiles=project.fileTree('.hooks/finally')
   logname="finish"
}

task('deployApp', dependsOn: 'finish')


task('checkConnection', type: OrcasCheckConnectionTask){
  logname="checkcon"
}

ddlInit.onlyIf { project.file('ddl/init').exists() && project.mode == 'init' }
dmlInit.onlyIf { project.file('dml/init').exists() && project.mode == 'init' }
ddlPre.onlyIf { project.file('ddl/pre').exists()   && project.mode == 'patch' }
dmlPre.onlyIf { project.file('dml/pre').exists()   && project.mode == 'patch' }
tables.onlyIf { project.file('tables').exists() }
tables_ddl.onlyIf { project.file('tables_ddl').exists() }
dropReplaceables.onlyIf { project.mode == 'init' }

hookFunctionsPre.onlyIf{ project.file('.hooks/pre/functions').exists() }
sourcesFunctions.onlyIf{ project.file('sources/functions').exists() }
hookFunctionsPost.onlyIf{ project.file('.hooks/post/functions').exists() }

hookProceduresPre.onlyIf{ project.file('.hooks/pre/procedures').exists() }
sourcesProcedures.onlyIf{ project.file('sources/procedures').exists() }
hookProceduresPost.onlyIf{ project.file('.hooks/post/procedures').exists() }

hookObjectsPre.onlyIf{ project.file('.hooks/pre/objects').exists() }
sourcesObjects.onlyIf{ project.file('sources/objects').exists() }
hookObjectsPost.onlyIf{ project.file('.hooks/post/objects').exists() }

hookPackagesPre.onlyIf{ project.file('.hooks/pre/packages').exists() }
sourcesPackages.onlyIf{ project.file('sources/packages').exists() }
hookPackagesPost.onlyIf{ project.file('.hooks/post/packages').exists() }

hookTriggerPre.onlyIf{ project.file('.hooks/pre/trigger').exists() }
sourcesTrigger.onlyIf{ project.file('sources/trigger').exists() }
hookTriggerPost.onlyIf{ project.file('.hooks/post/trigger').exists() }

hookViewsPre.onlyIf{ project.file('.hooks/pre/views').exists() }
sourcesViews.onlyIf{ project.file('sources/views').exists() }
hookViewsPost.onlyIf{ project.file('.hooks/post/views').exists() }

precompile.onlyIf { project.file('.hooks/precompile').exists() }

compileReplaceables.onlyIf { getNocompile() }

ddlPost.onlyIf { project.file('ddl/post').exists() }
dmlPost.onlyIf { project.file('dml/post').exists() }

finish.onlyIf { project.file('.hooks/finally').exists() }
       
orcasconfiguration {
  jdbcurl = "jdbc:oracle:thin:@"+project.target
  username = project.username
  password = project.password
  loglevel = "info"
  extractreplaceablesoutfolder="src/main/sql/replaceables"
  staticsfolder="src/main/sql/statics"
  excludewhereobjecttype = "object_name not like '%sys%'"
}

def getNocompile() {
    return project.nocompile == 'false' ? true : false
}